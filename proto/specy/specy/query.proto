syntax = "proto3";
package specy.specy;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "specy/specy/params.proto";
import "specy/specy/executor.proto";
import "specy/specy/task.proto";
// this line is used by starport scaffolding # 1
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "specy/x/specy/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/specy/specy/params";
  }
  // Queries a Executor by index.
	rpc Executor(QueryGetExecutorRequest) returns (QueryGetExecutorResponse) {
		option (google.api.http).get = "/specy/specy/executor/{address}";
	}

	// Queries a list of Executor items.
	rpc ExecutorAll(QueryAllExecutorRequest) returns (QueryAllExecutorResponse) {
		option (google.api.http).get = "/specy/specy/executor";
	}

// Queries a Task by index.
	rpc Task(QueryGetTaskRequest) returns (QueryGetTaskResponse) {
		option (google.api.http).get = "/specy/specy/task/{taskHash}";
	}

	// Queries a list of Task items.
	rpc TaskAll(QueryAllTaskRequest) returns (QueryAllTaskResponse) {
		option (google.api.http).get = "/specy/specy/task";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetExecutorRequest {
	  string address = 1;

}

message QueryGetExecutorResponse {
	Executor executor = 1 [(gogoproto.nullable) = false];
}

message QueryAllExecutorRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllExecutorResponse {
	repeated Executor executor = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTaskRequest {
	  string taskHash = 1;

}

message QueryGetTaskResponse {
	Task task = 1 [(gogoproto.nullable) = false];
}

message QueryAllTaskRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTaskResponse {
	repeated Task task = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
