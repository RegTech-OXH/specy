// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: specy/specy/executor.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Executor struct {
	Address              string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Staking              types.Coin `protobuf:"bytes,2,opt,name=staking,proto3" json:"staking"`
	IasAttestationReport string     `protobuf:"bytes,3,opt,name=iasAttestationReport,proto3" json:"iasAttestationReport,omitempty"`
	EnclavePk            string     `protobuf:"bytes,4,opt,name=enclavePk,proto3" json:"enclavePk,omitempty"`
}

func (m *Executor) Reset()         { *m = Executor{} }
func (m *Executor) String() string { return proto.CompactTextString(m) }
func (*Executor) ProtoMessage()    {}
func (*Executor) Descriptor() ([]byte, []int) {
	return fileDescriptor_39e9689693a618cc, []int{0}
}
func (m *Executor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Executor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Executor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Executor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Executor.Merge(m, src)
}
func (m *Executor) XXX_Size() int {
	return m.Size()
}
func (m *Executor) XXX_DiscardUnknown() {
	xxx_messageInfo_Executor.DiscardUnknown(m)
}

var xxx_messageInfo_Executor proto.InternalMessageInfo

func (m *Executor) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Executor) GetStaking() types.Coin {
	if m != nil {
		return m.Staking
	}
	return types.Coin{}
}

func (m *Executor) GetIasAttestationReport() string {
	if m != nil {
		return m.IasAttestationReport
	}
	return ""
}

func (m *Executor) GetEnclavePk() string {
	if m != nil {
		return m.EnclavePk
	}
	return ""
}

func init() {
	proto.RegisterType((*Executor)(nil), "specy.specy.Executor")
}

func init() { proto.RegisterFile("specy/specy/executor.proto", fileDescriptor_39e9689693a618cc) }

var fileDescriptor_39e9689693a618cc = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0x63, 0xa8, 0x28, 0x75, 0xb7, 0xd0, 0x21, 0x54, 0xc8, 0x54, 0x4c, 0x5d, 0x70, 0xd4,
	0x32, 0x31, 0x52, 0xc4, 0x8e, 0x32, 0xb2, 0x39, 0xe9, 0xaf, 0xc8, 0x2a, 0xf8, 0x8f, 0xf2, 0xff,
	0x54, 0xed, 0x5b, 0xf0, 0x2a, 0xbc, 0x45, 0xc7, 0x8e, 0x4c, 0x08, 0x25, 0x2f, 0x82, 0x6a, 0xa7,
	0x62, 0x61, 0x39, 0xd9, 0x77, 0xa7, 0xcf, 0xf2, 0xc9, 0x31, 0x55, 0x50, 0x6c, 0xd3, 0xa0, 0xb0,
	0x81, 0xe2, 0x9d, 0xb1, 0xd6, 0x55, 0x8d, 0x8c, 0xf1, 0xd0, 0xbb, 0xda, 0xeb, 0x78, 0x54, 0x62,
	0x89, 0xde, 0x4f, 0x0f, 0xa7, 0x50, 0x19, 0xab, 0x02, 0xe9, 0x0d, 0x29, 0xcd, 0x0d, 0x41, 0xba,
	0x9e, 0xe5, 0xc0, 0x66, 0x96, 0x16, 0x68, 0x5d, 0xc8, 0x6f, 0x3e, 0x85, 0x3c, 0x7f, 0xea, 0xa8,
	0x71, 0x22, 0xfb, 0x66, 0xb9, 0xac, 0x81, 0x28, 0x11, 0x13, 0x31, 0x1d, 0x64, 0xc7, 0x6b, 0x7c,
	0x2f, 0xfb, 0xc4, 0x66, 0x65, 0x5d, 0x99, 0x9c, 0x4c, 0xc4, 0x74, 0x38, 0xbf, 0xd4, 0x01, 0xac,
	0x0f, 0x60, 0xdd, 0x81, 0xf5, 0x23, 0x5a, 0xb7, 0xe8, 0xed, 0xbe, 0xaf, 0xa3, 0xec, 0xd8, 0x8f,
	0xe7, 0x72, 0x64, 0x0d, 0x3d, 0x30, 0x03, 0xb1, 0x61, 0x8b, 0x2e, 0x83, 0x0a, 0x6b, 0x4e, 0x4e,
	0xfd, 0x0b, 0xff, 0x66, 0xf1, 0x95, 0x1c, 0x80, 0x2b, 0x5e, 0xcd, 0x1a, 0x9e, 0x57, 0x49, 0xcf,
	0x17, 0xff, 0x8c, 0xc5, 0xed, 0xae, 0x51, 0x62, 0xdf, 0x28, 0xf1, 0xd3, 0x28, 0xf1, 0xd1, 0xaa,
	0x68, 0xdf, 0xaa, 0xe8, 0xab, 0x55, 0xd1, 0xcb, 0x45, 0x98, 0x69, 0xd3, 0xcd, 0xc5, 0xdb, 0x0a,
	0x28, 0x3f, 0xf3, 0x3f, 0xbd, 0xfb, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x95, 0x97, 0xf6, 0x4a,
	0x01, 0x00, 0x00,
}

func (m *Executor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Executor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Executor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnclavePk) > 0 {
		i -= len(m.EnclavePk)
		copy(dAtA[i:], m.EnclavePk)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.EnclavePk)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IasAttestationReport) > 0 {
		i -= len(m.IasAttestationReport)
		copy(dAtA[i:], m.IasAttestationReport)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.IasAttestationReport)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Staking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExecutor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExecutor(dAtA []byte, offset int, v uint64) int {
	offset -= sovExecutor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Executor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	l = m.Staking.Size()
	n += 1 + l + sovExecutor(uint64(l))
	l = len(m.IasAttestationReport)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	l = len(m.EnclavePk)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}

func sovExecutor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExecutor(x uint64) (n int) {
	return sovExecutor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Executor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Executor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Executor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Staking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IasAttestationReport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IasAttestationReport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclavePk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnclavePk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecutor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExecutor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExecutor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExecutor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExecutor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecutor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExecutor = fmt.Errorf("proto: unexpected end of group")
)
